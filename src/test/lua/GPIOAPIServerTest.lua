dofile("Bootstrap.lua")
dofile("TestingBootstrap.lua")

function gpioServerTest()
  local conn = MockConnection:new()
  test("Creates GPIO entries", function()
    net.server:connect(conn)
    conn:receive("POST /api/gpios HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 8, \"mode\": \"OUTPUT\", \"name\": \"Red LED\"}}")
    local redLED = sjson.decode(conn.messages[2])
    assertEquals(8, redLED.id)
    assertEquals("Red LED", redLED.name)
    assertEquals("OUTPUT", redLED.mode)
    assertEquals(gpio.OUTPUT, gpio.pins[8].mode)

    net.server:connect(conn)
    conn:receive("POST /api/gpios HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 7, \"mode\": \"OUTPUT\", \"name\": \"Yellow LED\"}}")
    local yellowLED = sjson.decode(conn.messages[2])
    assertEquals(7, yellowLED.id)
    assertEquals("Yellow LED", yellowLED.name)
    assertEquals("OUTPUT", yellowLED.mode)
    assertEquals(gpio.OUTPUT, gpio.pins[7].mode)

    net.server:connect(conn)
    conn:receive("POST /api/gpios HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 6, \"mode\": \"OUTPUT\", \"name\": \"Green LED\"}}")
    local greenLED = sjson.decode(conn.messages[2])
    assertEquals(6, greenLED.id)
    assertEquals("Green LED", greenLED.name)
    assertEquals("OUTPUT", greenLED.mode)
    assertEquals(gpio.OUTPUT, gpio.pins[6].mode)

    net.server:connect(conn)
    conn:receive("POST /api/gpios HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 5, \"mode\": \"INPUT\", \"name\": \"Input 1\"}}")
    local input1 = sjson.decode(conn.messages[2])
    assertEquals(5, input1.id)
    assertEquals("Input 1", input1.name)
    assertEquals("INPUT", input1.mode)
    assertEquals(gpio.INPUT, gpio.pins[5].mode)

    net.server:connect(conn)
    conn:receive("POST /api/gpios HTTP/1.1")
    conn:receive("{\"entity\": {\"id\": 4, \"mode\": \"INT\", \"name\": \"Trigger\"}}")
    local trigger = sjson.decode(conn.messages[2])
    assertEquals(4, trigger.id)
    assertEquals("Trigger", trigger.name)
    assertEquals("INT", trigger.mode)
    assertEquals(gpio.INT, gpio.pins[4].mode)
  end)

  test("Gets GPIO values", function()
    net.server:connect(conn)
    conn:receive("GET /api/gpios/8 HTTP/1.1")
    local redLED = sjson.decode(conn.messages[2])
    assertEquals(8, redLED.id)
    assertEquals("Red LED", redLED.name)
    assertEquals("OUTPUT", redLED.mode)
    assertEquals(nil, redLED.value)

    net.server:connect(conn)
    conn:receive("GET /api/gpios/5 HTTP/1.1")
    local input1 = sjson.decode(conn.messages[2])
    assertEquals(5, input1.id)
    assertEquals("Input 1", input1.name)
    assertEquals("INPUT", input1.mode)

    gpio.set(5, gpio.HIGH)
    net.server:connect(conn)
    conn:receive("GET /api/gpios/5 HTTP/1.1")
    input1 = sjson.decode(conn.messages[2])
    assertEquals(5, input1.id)
    assertEquals("Input 1", input1.name)
    assertEquals("INPUT", input1.mode)
    assertEquals(gpio.HIGH, input1.value)

    net.server:connect(conn)
    conn:receive("GET /api/gpios/4 HTTP/1.1")
    local trigger = sjson.decode(conn.messages[2])
    assertEquals(4, trigger.id)
    assertEquals("Trigger", trigger.name)
    assertEquals("INT", trigger.mode)

    gpio.set(4, gpio.HIGH)
    net.server:connect(conn)
    conn:receive("GET /api/gpios/4 HTTP/1.1")
    trigger = sjson.decode(conn.messages[2])
    assertEquals(4, trigger.id)
    assertEquals("Trigger", trigger.name)
    assertEquals("INT", trigger.mode)
    assertEquals(gpio.HIGH, trigger.value)

    net.server:connect(conn)
    conn:receive("GET /api/gpios/44 HTTP/1.1")
    assertEquals("HTTP/1.1 404 Not Found\n", conn.messages[1])
  end)

  test("Lists GPIOs and values", function()
    net.server:connect(conn)
    conn:receive("GET /api/gpios HTTP/1.1")
    local listResponse = sjson.decode(conn.messages[2])
    assertEquals(5, #listResponse.result)
    assertEquals(5, listResponse.totalSize)
  end)

  test("Updating GPIO properties and values", function()
    net.server:connect(conn)
    conn:receive("PATCH /api/gpios/6 HTTP/1.1")
    conn:receive("{\"entity\": {\"mode\": \"INPUT\", \"name\": \"Input 2\"}, \"updateMask\": [\"name\", \"mode\"]}")
    local input2 = sjson.decode(conn.messages[2])
    assertEquals(6, input2.id)
    assertEquals("Input 2", input2.name)
    assertEquals("INPUT", input2.mode)
    assertEquals(gpio.INPUT, gpio.pins[6].mode)

    net.server:connect(conn)
    conn:receive("PATCH /api/gpios/8 HTTP/1.1")
    conn:receive("{\"entity\": {\"value\": \"HIGH\"}, \"updateMask\": [\"value\"]}")
    local redLED = sjson.decode(conn.messages[2])
    assertEquals(8, redLED.id)
    assertEquals("Red LED", redLED.name)
    assertEquals("OUTPUT", redLED.mode)
    assertEquals("HIGH", redLED.value)
    assertEquals(gpio.HIGH, gpio.pins[8].value)
  end)

  test("Deleting GPIO entries", function()
    net.server:connect(conn)
    conn:receive("DELETE /api/gpios/6 HTTP/1.1")
    net.server:connect(conn)
    conn:receive("GET /api/gpios HTTP/1.1")
    local listResponse = sjson.decode(conn.messages[2])
    assertEquals(4, #listResponse.result)
    assertEquals(4, listResponse.totalSize)

    net.server:connect(conn)
    conn:receive("DELETE /api/gpios/7 HTTP/1.1")
    net.server:connect(conn)
    conn:receive("GET /api/gpios HTTP/1.1")
    listResponse = sjson.decode(conn.messages[2])
    assertEquals(3, #listResponse.result)
    assertEquals(3, listResponse.totalSize)
  end)
end

dofile("GPIOAPIServer.lua")
test("Test GPIOAPIServer", gpioServerTest)

dofile("GenericGPIOServer.lua")
test("Test GenericGPIOServer", gpioServerTest)
